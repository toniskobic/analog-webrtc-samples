<script lang="ts">
import {
  signal,
  inject,
  afterNextRender,
} from "@angular/core";
import { TitleCasePipe } from "@angular/common";
import { HlmButtonDirective } from "@spartan-ng/ui-button-helm";
import { FilterValues } from "../../models/filter.model";
import { CanvasService } from "../../services/canvas.service.analog";
import { MediaStreamService } from "../../services/media-stream.service.analog";
import { Subject } from "rxjs";

defineMetadata({
  selector: "app-filter-get-user-media",
  imports: [TitleCasePipe, HlmButtonDirective],
});

// TODO Remove temporary typing solution when Analog Language Server is fully implemented
const canvasService: { drawImage(canvas: HTMLCanvasElement, video: HTMLVideoElement): void } = inject(CanvasService);
const mediaStreamService: { getUserMedia(constraints?: MediaStreamConstraints): Promise<MediaStream | undefined> } = inject(MediaStreamService);
const stream = signal<MediaStream | undefined>(undefined);
const rendered$ = new Subject<void>();

const options = signal<{ value: FilterValues; class: string }[]>([
  { value: "none", class: "" },
  { value: "blur", class: "blur-sm" },
  { value: "grayscale", class: "grayscale" },
  { value: "invert", class: "invert" },
  { value: "sepia", class: "sepia" },
]);
const selectedOption = signal<{ value: FilterValues; class: string }>({
  value: "none",
  class: "",
});

onInit(() => {
  rendered$.subscribe(async () => {
      const mediaStream = await mediaStreamService.getUserMedia({video: true, audio: false});
      stream.set(mediaStream);
  });
});

afterNextRender(async () => {
  rendered$.next();
});

function onClick() {
  const video = document.querySelector("video");
  const canvas = document.querySelector("canvas");
  if (!canvas || !video) return;
  canvas.className = `${selectedOption().class} rounded-3xl`;
  canvasService.drawImage(canvas, video);
}

function onChange() {
  const selectEl = document.querySelector("select");
  if (!selectEl) return;

  const value = selectEl.value as FilterValues;
  const selectedValue = options().find((option) => option.value === value)

  if (!selectedValue) return;

  selectedOption.set(selectedValue);
}

onDestroy(() => {
  stream()?.getTracks().forEach((track) => {
    track.stop();
  });
  rendered$.unsubscribe();
});
</script>

<template>
<div class="flex flex-col items-center py-3">
  <div class="flex flex-row flex-wrap justify-center items-start gap-3 px-4">
    <div class="flex flex-col items-start gap-3">
      <video class="block w-[640px] max-w-full aspect-[64/48] rounded-3xl bg-secondary
          {{ selectedOption().class }}" autoplay playsinline [srcObject]="stream()"></video>
      <div class="flex gap-5">
        <div class="flex items-center gap-2">
          <label for="filter">Filter:</label>
          <select id="filter" (change)="onChange()" class="rounded-lg py-1 cursor-pointer">
            @for (option of options(); track options) {
            <option value="{{ option.value }}">
              {{ option.value | titlecase }}
            </option>
            }
          </select>
        </div>
        <button hlmBtn (click)="onClick()">Take snapshot</button>
      </div>
    </div>
    <canvas class="block w-[640px] max-w-full aspect-[64/48] rounded-3xl bg-secondary"></canvas>
    </div>
  </div>
</template>
